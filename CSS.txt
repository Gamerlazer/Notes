July 2, 2016

Adding CSS to HTML via external sheet:
	Add a reference to the sheet in the head:
	<head> 
		<title> CSS Cross Country</title>
		<link rel-"stylesheet" href="styles.css"/>
	</head>

Selectors:
	Element Selectors: tag
	Class Selectors: .classname
	ID Selectors #idname
Cascade Order:
	1) Style priority is determined by position on the site:
		Least Important:
			External <link>
			In the <head>
			Inline style attributes
			Using !important
		Most Important:
	2) Where the style is positioned on the style sheet.
		In the casade, the item downstreams override items upstream
Float Properity:
	- Removes element from normal document flow and move them to the edge of the parent container 
	- Other content with the parent flows around the float item
	- If items must break-line, their order in the HTML will determine which will be pushed to the new line. Same if all item have the same float property

Clearing Floats:
	- You must clear a float, if the float could be larger than the parent container
	- All children are floating
	Three methods to clear a float:
		1) Clear with a element, but adding clear to the item beneath your floated item. Any item from a previous container will not overlap on the subsquent item
			- Issues: 
				- Will not stay if you need to rearrange the order of the items later
				- If the parent of your floated item is smaller than your floated object. The background/border will not extend
		2) Manual clearing, adding an element in the parent only to clear. (clear:both;)}
			- Issues:
				- You're adding an empty element
				- Might not be necessary later, if you decide to remove the float
		3) Clearfix (MOST RECOMMENDED), it adds a group class within any elements that contains a float element.
Inheritance & Specificity:
	Inheritance:
		All children within a parent inherits the parent style unless it's overwritten.
		- To override, add a nested selector: 
			.featured p {
				color: #fff; 
			}
	Specificity:
		0, 0, 0, 0 - weighing out specificity 
		inline-style, # of ID, # of class, # elements

The Box Model:
	An imaginary diagram that outlines each DOM element
		1) Content Area
		2) Padding Area
		3) Boarder Area
		4) Margin Area
	Width:
		Total calculated box width:
			content width + padding width + border width
		- To Adapt design, take total box width subtract padding and border width to get width (content width)
	Overflow Property:
		overflow: visible [default] / auto / hidden / scroll

Positioning:
	Position Property:
		position: static / relative / absolute / fixed
	Any element NOT static is considered a positioned element.

Z-Index:
	Position items in front of one another

Staying DRY: Don't Repeat Yourself
	Selector combination:
		p, .ski_lift, h6 {
			font-size: 12px;
		}
	Style shorthand: 
		margin or padding: 
			- top right bottom left
			- top right&left bottom
			- top&bottom right&left
		font: size/line-height weight style family
		background: color image repeat x-pos y-pos
		list-style: style position image
		border: width style color

Display Types:
	- How elements interact on the page
	display: none / block / inline / inline-block

	Block elements:
		- Stretch full width of their container
		- Behaves like there is a line break before and after the element
		- Full box model
	Inline elements:
		- Typically found within block-level elements
		- Only takes up space of the content inside
		- Does not create a line break before or after the content
	Inline-Block:
		- Can implement full box model
		- Work inline other elements, does not take up full width of container
Centering:
	Block-level element:
		margin: 0 auto; <- will center the object regardless
	Inline and Inline-Block:
		text-align: center;












